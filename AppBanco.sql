CREATE TABLE USUARIOS (
CEDULA VARCHAR(10) PRIMARY KEY,
NOMBRE VARCHAR(25),
APELLIDO VARCHAR(25),
FECHANAC DATE DEFAULT CURRENT_DATE,
USUARIO VARCHAR(15) UNIQUE,
CLAVE VARCHAR(60)
);

CREATE TABLE TARJETAS (
ID SERIAL PRIMARY KEY,
CEDULA VARCHAR(10), 
BALANCE DECIMAL(10, 2),
FOREIGN KEY (CEDULA) REFERENCES USUARIOS(CEDULA)
);

CREATE TABLE TRANSACCIONES_TARJETAS (
ID SERIAL PRIMARY KEY,
IDTARJETA INT,
MONTO DECIMAL(10, 2),
FECHA DATE,
FOREIGN KEY (IDTARJETA) REFERENCES TARJETAS(ID)
);

CREATE TABLE CUENTAS (
ID SERIAL PRIMARY KEY,
CEDULA VARCHAR(10),
BALANCE DECIMAL(10, 2),
TIPO VARCHAR(10),
FOREIGN KEY (CEDULA) REFERENCES USUARIOS(CEDULA)
);

CREATE TABLE RETIROS (
ID SERIAL PRIMARY KEY,
IDCUENTA INT,
MONTO DECIMAL(10, 2),
FECHA DATE DEFAULT CURRENT_DATE,
FOREIGN KEY (IDCUENTA) REFERENCES CUENTAS(ID)
);

CREATE TABLE DEPOSITOS (
ID SERIAL PRIMARY KEY,
IDCUENTA INT,
MONTO DECIMAL(10, 2),
FECHA DATE DEFAULT CURRENT_DATE,
FOREIGN KEY (IDCUENTA) REFERENCES CUENTAS(ID)
);

CREATE TABLE TRANSACCIONES_CUENTAS (
ID SERIAL PRIMARY KEY,
IDCUENTA INT,
IDCUENTAOUT INT,
MONTO DECIMAL(10, 2),
FECHA DATE DEFAULT CURRENT_DATE,
FOREIGN KEY (IDCUENTA) REFERENCES CUENTAS(ID),
FOREIGN KEY (IDCUENTAOUT) REFERENCES CUENTAS(ID)
);


CREATE OR REPLACE FUNCTION ENCRYPT_CLAVE()
RETURNS TRIGGER AS $$
BEGIN 
	NEW.CLAVE := CRYPT(NEW.CLAVE, GEN_SALT('BF'));
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ENCRYPT_CLAVE_TRIGGER
BEFORE INSERT OR UPDATE ON USUARIOS
FOR EACH ROW
EXECUTE FUNCTION ENCRYPT_CLAVE();


CREATE OR REPLACE PROCEDURE VERIFICAR_CEDULA_CLAVE (
    IN P_CEDULA VARCHAR(10), 
    IN P_CLAVE VARCHAR(15) )
LANGUAGE PLPGSQL AS $$
DECLARE
	MENSAJE VARCHAR(50);
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM USUARIOS 
        WHERE CEDULA = P_CEDULA AND CLAVE = P_CLAVE
    ) THEN
        SET MENSAJE = 'Acceso permitido';
    ELSE
        SET MENSAJE = 'Acceso denegado';
    END IF;

    SELECT MENSAJE AS mensaje;
END;
$$;